// Code generated by ent, DO NOT EDIT.

package ent

import (
	"calling-bill/ent/call"
	"calling-bill/ent/predicate"
	"calling-bill/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CallUpdate is the builder for updating Call entities.
type CallUpdate struct {
	config
	hooks     []Hook
	mutation  *CallMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CallUpdate builder.
func (cu *CallUpdate) Where(ps ...predicate.Call) *CallUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDuration sets the "duration" field.
func (cu *CallUpdate) SetDuration(i int) *CallUpdate {
	cu.mutation.ResetDuration()
	cu.mutation.SetDuration(i)
	return cu
}

// AddDuration adds i to the "duration" field.
func (cu *CallUpdate) AddDuration(i int) *CallUpdate {
	cu.mutation.AddDuration(i)
	return cu
}

// SetBlockCount sets the "block_count" field.
func (cu *CallUpdate) SetBlockCount(i int) *CallUpdate {
	cu.mutation.ResetBlockCount()
	cu.mutation.SetBlockCount(i)
	return cu
}

// AddBlockCount adds i to the "block_count" field.
func (cu *CallUpdate) AddBlockCount(i int) *CallUpdate {
	cu.mutation.AddBlockCount(i)
	return cu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cu *CallUpdate) SetUserID(id int) *CallUpdate {
	cu.mutation.SetUserID(id)
	return cu
}

// SetUser sets the "user" edge to the User entity.
func (cu *CallUpdate) SetUser(u *User) *CallUpdate {
	return cu.SetUserID(u.ID)
}

// Mutation returns the CallMutation object of the builder.
func (cu *CallUpdate) Mutation() *CallMutation {
	return cu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cu *CallUpdate) ClearUser() *CallUpdate {
	cu.mutation.ClearUser()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CallUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CallMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CallUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CallUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CallUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CallUpdate) check() error {
	if _, ok := cu.mutation.UserID(); cu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Call.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CallUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CallUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CallUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   call.Table,
			Columns: call.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: call.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: call.FieldDuration,
		})
	}
	if value, ok := cu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: call.FieldDuration,
		})
	}
	if value, ok := cu.mutation.BlockCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: call.FieldBlockCount,
		})
	}
	if value, ok := cu.mutation.AddedBlockCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: call.FieldBlockCount,
		})
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   call.UserTable,
			Columns: []string{call.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   call.UserTable,
			Columns: []string{call.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = cu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{call.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CallUpdateOne is the builder for updating a single Call entity.
type CallUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CallMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDuration sets the "duration" field.
func (cuo *CallUpdateOne) SetDuration(i int) *CallUpdateOne {
	cuo.mutation.ResetDuration()
	cuo.mutation.SetDuration(i)
	return cuo
}

// AddDuration adds i to the "duration" field.
func (cuo *CallUpdateOne) AddDuration(i int) *CallUpdateOne {
	cuo.mutation.AddDuration(i)
	return cuo
}

// SetBlockCount sets the "block_count" field.
func (cuo *CallUpdateOne) SetBlockCount(i int) *CallUpdateOne {
	cuo.mutation.ResetBlockCount()
	cuo.mutation.SetBlockCount(i)
	return cuo
}

// AddBlockCount adds i to the "block_count" field.
func (cuo *CallUpdateOne) AddBlockCount(i int) *CallUpdateOne {
	cuo.mutation.AddBlockCount(i)
	return cuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cuo *CallUpdateOne) SetUserID(id int) *CallUpdateOne {
	cuo.mutation.SetUserID(id)
	return cuo
}

// SetUser sets the "user" edge to the User entity.
func (cuo *CallUpdateOne) SetUser(u *User) *CallUpdateOne {
	return cuo.SetUserID(u.ID)
}

// Mutation returns the CallMutation object of the builder.
func (cuo *CallUpdateOne) Mutation() *CallMutation {
	return cuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (cuo *CallUpdateOne) ClearUser() *CallUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CallUpdateOne) Select(field string, fields ...string) *CallUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Call entity.
func (cuo *CallUpdateOne) Save(ctx context.Context) (*Call, error) {
	var (
		err  error
		node *Call
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CallMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Call)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CallMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CallUpdateOne) SaveX(ctx context.Context) *Call {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CallUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CallUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CallUpdateOne) check() error {
	if _, ok := cuo.mutation.UserID(); cuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Call.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CallUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CallUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CallUpdateOne) sqlSave(ctx context.Context) (_node *Call, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   call.Table,
			Columns: call.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: call.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Call.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, call.FieldID)
		for _, f := range fields {
			if !call.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != call.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: call.FieldDuration,
		})
	}
	if value, ok := cuo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: call.FieldDuration,
		})
	}
	if value, ok := cuo.mutation.BlockCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: call.FieldBlockCount,
		})
	}
	if value, ok := cuo.mutation.AddedBlockCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: call.FieldBlockCount,
		})
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   call.UserTable,
			Columns: []string{call.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   call.UserTable,
			Columns: []string{call.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = cuo.modifiers
	_node = &Call{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{call.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
